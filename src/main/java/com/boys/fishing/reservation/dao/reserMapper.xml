<?xml version="1.0" encoding="UTF-8"?>
<!-- mapper에 대한 선언 문 -->
<!DOCTYPE mapper PUBLIC
   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<mapper namespace="com.boys.fishing.reservation.dao.ReserDAO">

	<!-- 배 편 찾기 -->
	<select id="findShip" resultType="reser" >
		SELECT * FROM operrange op LEFT OUTER JOIN ship s ON (op.s_num = s.s_num)
		LEFT OUTER JOIN shipIMG simg ON (op.s_num = simg.s_num)
		WHERE op.op_date >= SYSDATE AND op.i_num = #{param1}
	</select> 
	<!-- 유저 달력 예약 정보를 가져온다. -->
	<select id="user_reser" resultType="reser">
		SELECT ri_num, ri_userid, ri_code, s_num, ri_date,ri_startreturnyn FROM reserINFO
		WHERE ri_userid = #{param1}
	</select>
	<!-- 섬의 상세정보를 가져온다. -->
	<select id="detail_island" resultType="apis" parameterType="String">
		SELECT * FROM island WHERE i_num = #{param1}
	</select>
	
	<!-- 선장의 스케줄 -->
	<select id="captain_reser" resultType='hashmap'>
	SELECT op.s_num, op.i_num, op.op_startpoint, op.op_starttime, op.op_duringtime, i.i_name,
op.op_returntime, op.op_date, op.op_date, op.op_price FROM operrange op LEFT OUTER JOIN ship s 
ON (op.s_num = s.s_num) LEFT OUTER JOIN island i ON (op.i_num = i.i_num) WHERE u_userid=#{param1}
	</select>
	<!-- 선장 스케줄 업데이트 -->
	<update id="updateCapSche" parameterType="HashMap">
		UPDATE operrange
		<set>
			s_num = #{s_num},
			op_starttime = #{op_starttime},
			i_num = #{i_num},
			op_startpoint = #{op_startpoint},
			op_duringtime = #{op_duringtime},
			op_returntime = #{op_returntime},
			op_price = #{op_price}
		</set>
		WHERE s_num = #{ori_s_num} AND i_num=#{ori_i_num} AND op_starttime = #{ori_op_starttime} AND op_date = #{ori_op_date}
	</update>

	<!-- 배 편 스케줄 가져오기 -->
	<select id="choice_reser" resultType='hashmap'>
		SELECT * FROM operrange op LEFT OUTER JOIN ship s
		ON (s.s_num = op.s_num) LEFT OUTER JOIN island i ON (op.i_num = i.i_num)
		WHERE op.i_num=#{param2} AND op.s_num = #{param1} AND op.op_date > SYSDATE
	</select>
	<!-- 예약하기 -->
	<insert id="RealReser" parameterType="hashMap">
		INSERT INTO reserinfo VALUES (ri_num_seq.NEXTVAL,#{ri_userid},#{i_num},'RI001',#{s_num},#{ri_startpoint},#{ri_starttime},#{ri_duringtime},#{ri_returntime},#{ri_people},#{ri_startreturnYN},#{ri_date},'없음',#{op_price}*#{ri_people},SYSDATE) 
	</insert>
	
	<!-- 예약 확정이 있는지 확인 -->
	<select id="checkReser" resultType="int" parameterType='hashMap'>
		SELECT COUNT(ri.ri_num) FROM operrange op LEFT OUTER JOIN reserinfo ri
		ON ( op.i_num = ri.i_num AND  op.s_num = ri.s_num AND op.op_date = ri.ri_date)
		WHERE ri.ri_code ='RI002' AND op.s_num = #{s_num} AND op.i_num = #{i_num} AND op.op_date =#{op_date}
		AND op.op_starttime = #{op_starttime} AND op.op_returntime = #{op_returntime} AND op.op_duringtime = #{op_duringtime}
	</select>
	
	<!-- 예약 요청 확인 -->
	<select id="checkNReser" resultType='String' parameterType="hashMap">
		SELECT ri.ri_num FROM operrange op LEFT OUTER JOIN reserinfo ri
		ON ( op.i_num = ri.i_num AND  op.s_num = ri.s_num AND op.op_date = ri.ri_date)
		WHERE ri.ri_code ='RI001' AND op.s_num = #{s_num} AND op.i_num = #{i_num} AND op.op_date =#{op_date}
		AND op.op_starttime = #{op_starttime} AND op.op_returntime = #{op_returntime} AND op.op_duringtime = #{op_duringtime}
	</select>
	<!-- 예약 요청 삭제 -->
	<delete id="delReser" parameterType="String">
		DELETE FROM reserinfo ri WHERE ri_num= #{param1}
	</delete>
	<!-- 스케줄 삭제 -->
	<delete id="delSchdule" parameterType="hashMap">
		DELETE FROM operrange WHERE op_date =#{op_date} AND s_num = #{s_num} AND i_num = #{i_num} AND op_startpoint= #{op_startpoint} AND op_starttime= #{op_starttime} AND op_duringtime = #{op_duringtime} AND op_returntime = #{op_returntime} AND op_price = #{op_price} 
	</delete>
</mapper>
